{
  "name": "Redux-amrc",
  "tagline": "Redux async middleware and reducer creator",
  "body": "# Redux async middleware and reducer creator\r\n\r\n[![NPM Version](https://img.shields.io/npm/v/redux-amrc.svg?style=flat)](https://www.npmjs.com/package/redux-amrc)\r\n[![Build Status](https://travis-ci.org/lewis617/redux-amrc.svg?branch=master)](https://travis-ci.org/lewis617/redux-amrc)\r\n[![codecov](https://codecov.io/gh/lewis617/redux-amrc/branch/master/graph/badge.svg)](https://codecov.io/gh/lewis617/redux-amrc)\r\n[![npm](https://img.shields.io/npm/dm/redux-amrc.svg?maxAge=2592000)](redux-amrc)\r\n[![npm](https://img.shields.io/npm/l/redux-amrc.svg?maxAge=2592000)](redux-amrc)\r\n\r\nThis package will help you dispatch async action with less boilerplate.\r\n\r\n## Install\r\n\r\n```\r\nnpm install redux-amrc --save\r\n```\r\n\r\n## How to use\r\n\r\nstore/configureStore.js\r\n\r\n```js\r\nimport { asyncMiddleware } from 'redux-amrc';\r\n\t\r\napplyMiddleware(thunk, asyncMiddleware)\r\n\r\n```\r\n\r\nreducers/index.js\r\n\r\n```js\r\nimport { combineReducers } from 'redux';\r\nimport { reducerCreator } from 'redux-amrc';\r\n\r\nconst rootReducer = combineReducers({\r\n  async: reducerCreator()\r\n});\r\n\r\nexport default rootReducer;\r\n```\r\n\r\nactions/index.js\r\n\r\n```js\r\nimport { ASYNC } from 'redux-amrc';\r\n\r\n/**\r\n * This actionCreator will create LOAD and LOAD_SUCCESS,\r\n * state.async.[key] will be 'success'\r\n */\r\nfunction success() {\r\n  return {\r\n    [ASYNC]: {\r\n      key: 'key',\r\n      promise: () => Promise.resolve('success')\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This actionCreator will create LOAD and LOAD_FAIL,\r\n * state.async.loadState.[key].error will be 'fail'\r\n */\r\nfunction fail() {\r\n  return {\r\n    [ASYNC]: {\r\n      key: 'key',\r\n      promise: () => Promise.reject('fail')\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf you want to add some code after async, you can just do this:\r\n\r\n```\r\ndispatch(success())\r\n  .then((action) => {\r\n    console.log(action); // { payload: { data: 'success', key: 'key' }, type: '@async/LOAD_SUCCESS' }\r\n  });\r\n\r\ndispatch(fail())\r\n  .then((action) => {\r\n    console.log(action); // { payload: { error: 'fail', key: 'key' }, type: '@async/LOAD_FAIL' }\r\n  });\r\n```\r\n\r\nIf you want to add some code before async, you should write another action creator, because one function should do one thing.\r\n\r\n```\r\nfunction loadData() {\r\n  return {\r\n    [ASYNC]: {\r\n      key: 'data',\r\n      promise: () => fetch('/api/data')\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw new Error(res.statusText);\r\n          }\r\n          return res.json();\r\n        })\r\n    }\r\n  };\r\n}\r\n\r\nfunction loadDataIfNeeded() {\r\n  return (dispatch, getState) => {\r\n    if (!getState().async.data) {\r\n      dispatch(loadData())\r\n    }\r\n  };\r\n}\r\n\r\n```\r\n\r\nIf you don't like writing load*IfNeeded function, you can use \"once\" option to load data if needed.\r\n\r\n```\r\nfunction loadData() {\r\n  return {\r\n    [ASYNC]: {\r\n      key: 'data',\r\n      promise: () => fetch('/api/data')\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw new Error(res.statusText);\r\n          }\r\n          return res.json();\r\n        })\r\n      once: true\r\n    }\r\n  };\r\n}\r\n```\r\n \r\nIf you want to update data in in `state.async.[key]` with your own action and reducer, you should add `reducers` to `reducerCreator(reducers)`, `reducers` in `reducerCreator(reducers)` is same as `reducers` in `combineReducers(reducers)`:\r\n\r\n```\r\n// your own action type\r\nconst TOGGLE = 'TOGGLE';\r\n\r\n// your own reducer\r\nfunction keyReducer(state, action) {\r\n  switch (action.type) {\r\n    case TOGGLE:\r\n      return state === 'success' ? 'fail' : 'success';\r\n    default:\r\n      return state\r\n  }\r\n\r\n}\r\n\r\n// add reducers to reducerCreator\r\nconst rootReducer = combineReducers({\r\n  async: reducerCreator({\r\n    key: keyReducer\r\n  })\r\n});\r\n\r\n// This will toggle data in `state.async.key`\r\ndispatch({ type: TOGGLE }); \r\n```\r\n\r\n## How to test\r\n\r\nIf your action creator is like this:\r\n\r\n```\r\nfunction loadData() {\r\n  return {\r\n    [ASYNC]: {\r\n      key: 'data',\r\n      promise: () => fetch('http://localhost:3000/api/data')\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw new Error(res.statusText);\r\n          }\r\n          return res.json();\r\n        })\r\n    }\r\n  };\r\n}\r\n```\r\n\r\nThe test should be like this:\r\n\r\n```\r\nimport expect from 'expect';\r\nimport configureStore from 'redux-mock-store';\r\nimport thunk from 'redux-thunk';\r\nimport { asyncMiddleware } from 'redux-amrc';\r\nimport { load, loadSuccess } from 'redux-amrc/lib/redux';\r\nimport nock from 'nock';\r\nimport { loadData } from '../your_action_file';\r\n\r\nconst middlewares = [thunk, asyncMiddleware];\r\nconst mockStore = configureStore(middlewares);\r\nconst data = { value: 'data' };\r\n\r\nfunction setup(state = {}) {\r\n  nock('http://localhost:3000')\r\n    .get('/api/dga')\r\n    .reply(200, data);\r\n  return mockStore(state);\r\n}\r\n\r\ndescribe('data actions test', () => {\r\n  afterEach(() => {\r\n    nock.cleanAll();\r\n  });\r\n  it('loadData should create Load and LOAD_SUCCESS actions and return Promise', () => {\r\n    const expectedActions = [\r\n      load('data'),\r\n      loadSuccess('data', data)\r\n    ];\r\n    const store = setup();\r\n    return store.dispatch(loadData())\r\n      .then((action) => {\r\n        expect(action).toEqual(loadSuccess('data', data));\r\n        expect(store.getActions()).toEqual(expectedActions);\r\n      });\r\n  });\r\n});\r\n\r\n```\r\n\r\n## Action and state\r\n\r\n* action\r\n    * LOAD: data loading for particular key is started\r\n    * LOAD_SUCCESS: data loading process successfully finished. You'll have data returned from promise\r\n    * LOAD_FAIL: data loading process was failed. You'll have error returned from promise\r\n\r\n* state\r\n    * [key]: Data, returned from resolved promise\r\n    * loadState.[key].loading: [key].loading \r\n    * loadState.[key].loaded: Identifies that promise was resolved\r\n    * loadState.[key].error: Errors, returned from rejected promise\r\n    * loadingNumber: Number of loading\r\n\r\n\r\n## API\r\n\r\n* `asyncMiddleware`: Redux Middleware\r\n\r\n* `[ASYNC]`\r\n    * `key`: String\r\n    * `promise(store)`: Function => Promise\r\n        * `store`(Option): Object\r\n    * `once`: Bool\r\n  \r\n* `reducerCreator(reducers)`: Function => Reducer\r\n    * `reducers`(Option): Object\r\n\r\n## License\r\n\r\nMIT\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}